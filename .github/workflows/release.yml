name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: animesh-linux
          - os: macos-latest
            artifact_name: animesh-macos
          - os: windows-latest
            artifact_name: animesh-windows
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Rust Cache
      uses: Swatinem/rust-cache@v2
    
    - name: Build
      run: cargo build --release --verbose
    
    - name: Package
      shell: bash
      run: |
        cd target/release
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          if [ ! -f "animesh.exe" ]; then
            echo "Error: animesh.exe not found in target/release"
            ls -la
            exit 1
          fi
          7z a ../../${{ matrix.artifact_name }}.zip animesh.exe
        else
          if [ ! -f "animesh" ]; then
            echo "Error: animesh binary not found in target/release"
            ls -la
            exit 1
          fi
          tar czf ../../${{ matrix.artifact_name }}.tar.gz animesh
        fi
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}

  publish:
    name: Publish to crates.io
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v4
      with:
        ref: master
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Update version
      run: |
        # Extract version from tag (remove 'v' prefix)
        VERSION=${GITHUB_REF#refs/tags/v}
        # Update Cargo.toml version
        sed -i "s/^version = \".*\"/version = \"$VERSION\"/" Cargo.toml
        # Verify the change
        cat Cargo.toml | grep "^version ="
    
    - name: Commit version update
      run: |
        git config --global user.name 'GitHub Action'
        git config --global user.email 'action@github.com'
        git add Cargo.toml
        git commit -m "chore: bump version to $VERSION"
        git push origin master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Publish to crates.io
      run: cargo publish
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }} 